{{ reserveImport "context"  }}
{{ reserveImport "time"  }}

{{ range $w := .Wrappers }}
    type {{$w.Type}} struct {
        cfg TimeoutsConfig
        parent {{$w.ObjectType}}
    }

    func New{{$w.Type}}(parent {{$w.ObjectType}}, cfg TimeoutsConfig) *{{$w.Type}}{
        return &{{$w.Type}}{
            cfg: cfg,
            parent: parent,
        }
    }

    {{ range $f := $w.Resolvers }}
        // {{ $f.GoFieldName }} is an adapter method for invoking original method with timeout.
        // config example:
        // {{$w.ObjectName}}:
        //   {{$f.Name}}: 10s
        func (r *{{$w.Type}}) {{ $f.GoFieldName }}{{ $f.ResolverImplementation }} {
            dur, ok := r.cfg.GetTimeout({{$w.ObjectName|quote}}, {{$f.Name|quote}})
            if ok {
                var cancel func()
                ctx, cancel = context.WithTimeout(ctx, dur)
                defer cancel()
            }

            return {{$f.Invocation}}
        }
    {{ end }}
{{ end }}

type TimeoutsConfig interface{
    GetTimeout(object, field string) (time.Duration, bool)
}

